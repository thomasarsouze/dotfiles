# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export XDG_CONFIG_HOME="$HOME/.config"

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

source /Users/arsouze/Documents/Codes_divers/fzf-git.sh/fzf-git.sh

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git
        copyfile
        copypath
        dircycle
        cp
        fzf-tab
        fast-syntax-highlighting
        extract
        web-search
        autojump
        k
        zsh-bat
        zsh-autosuggestions
        zsh-syntax-highlighting
        )

source $ZSH/oh-my-zsh.sh
source <(fzf --zsh)
source ~/.fzf_functions.sh

# User configuration
autoload zmv

# tmux Ctrl-f binding for fzf
bindkey -s ^f "tmux-sessionizer\n"

export PATH="$PATH:$HOME/.local/scripts"


# carapace-bin
export CARAPACE_BRIDGES='zsh,fish,bash,inshellisense' # optional
zstyle ':completion:*' format $'\e[2;37mCompleting %d\e[m'
source <(carapace _carapace)

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -lFh'
alias lsr='ls -lrt'
alias t='tail -f'
alias topu='top -U ${USER}'
alias e="eza --color=always --long --git --icons=always --no-user --no-permissions"

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias zshrc='nvim ${ZDOTDIR:-$HOME}/.zshrc' # Quick access to the .zshrc file

alias -g marker_single="/Users/arsouze/Documents/Codes_divers/marker/.pixi/envs/default/bin/marker_single --batch_multiplier 2"
alias -g marker="/Users/arsouze/Documents/Codes_divers/marker/.pixi/envs/default/bin/marker"

alias dud='du -d 1 -h' # size of directories at level 1
alias dd='sudo /usr/local/bin/ntfs-3g /dev/disk1s1 /Volumes/NTFS -o local -o allow_other -o auto_xattr -o auto_cache' # external hard drive mounting
alias ff='find . -type f -name' # file search by name
alias h='history'

alias -g B='-h 2>&1 | bat --language=help --style=plain'
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g L="| less"
alias -g M="| most"
alias -g LL="2>&1 | less"
alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"


# git diff displayed with bat
function batdiff() {
    git diff --name-only --relative --diff-filter=d | xargs bat --diff
}

#---------------
# screen
alias sn='screen -S'  # sn for screen new
alias sl='screen -ls' # sl for screen list
alias sr='screen -x'  # sr for screen resume
function sk() {
  # sk for screen kill
  # function instead of alias because the order of the parameters matters
  screen -S "$1" -X quit
}

#---------------
# ipython-like R interpreter
alias r="radian"


# Java 1.8 as default
export JAVA_HOME=$(/usr/libexec/java_home -v 1.8.0_202)
# Add boost
export DYLD_LIBRARY_PATH=/usr/local/boost-1.79.0/lib:$DYLD_LIBRARY_PATH
# Add Julia
export PATH="$PATH:/Applications/Julia-1.9.app/Contents/Resources/julia/bin/"
# Add maven
export PATH="$PATH:/Users/arsouze/Documents/Codes_divers/apache-maven-3.8.4/bin"
# Add AMAP Studio: xplo, simeo, amapscan
export PATH="$PATH:/Users/arsouze/Documents/Modeles/Codes/AMAPstudio/"
alias bsc_vpn='sudo openfortivpn gw.bsc.es:443 --username=tarsouze --trusted-cert 447c58741d77c8f3ff923c2f7846d6ef8e231c59bd4c32b24395df0393091f7f'

# Quarto
export QUARTO_PYTHON='/Users/arsouze/miniconda3/bin/python'

# Unknown QT need
export QT_MAC_WANTS_LAYER=1

# Pixi
export PATH=$PATH:/Users/arsouze/.pixi/bin
eval "$(pixi completion --shell zsh)"
eval "$(rattler-build completion --shell zsh)"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/arsouze/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/arsouze/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/arsouze/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/arsouze/miniconda3/bin:$PATH"
    fi
fi
if [ -f "/Users/arsouze/miniconda3/etc/profile.d/mamba.sh" ]; then
    . "/Users/arsouze/miniconda3/etc/profile.d/mamba.sh"
fi
unset __conda_setup
# <<< conda initialize <<<

# Set .condarc file
cat <<EOF >~/.condarc
channels:
  - nodefaults
  - openalea3
  - conda-forge
solver: libmamba
channel_priority: strict
EOF
## Special case at CIRAD, need to use certificate
## We check if ip address is at home or phone connexion
if ! [[ $(ifconfig | grep 192.168) ]]; then
  echo "ssl_verify: /Users/arsouze/.conda/certif/Fortinet_CA_SSL.crt" >> ~/.condarc
fi



# Golang environment variables
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:$PATH:

alias fabric='fabric-ai'
export PATH=$PATH:/Users/arsouze/Documents/Codes_divers/yt-dlp

#****************************************************

# Useful functions

# mkdir newdir then cd into it
# usage: mcd (<mode>) <dir>
function mcd {
    local newdir='_mcd_command_failed_'
    if [ -d "$1" ]; then         # Dir exists, mention that...
        echo $1 exists...
    else
        if [ -n "$2" ]; then     # We've specified a mode
            command mkdir -p -m $1 "$2" && newdir="$2"
        else                     # Plain old mkdir
            command mkdir -p "$1" && newdir="$1"
        fi
    fi
    builtin cd "$newdir"         # No matter what, cd into it
} # end of mcd

# Trivial command line calculator
function calc {
    # INTEGER ONLY! --> echo The answer is: $(( $* ))
    # Floating point
    awk "BEGIN {print \"The answer is: \" $* }";
} # end of calc

# Allow use of 'cd ...' to cd up 2 levels, 'cd ....' up 3, etc. (like 4NT/4DOS)
# Usage: cd ..., etc.
function cd {

    local option= length= count= cdpath= i= # Local scope and start clean

    # If we have a -L or -P sym link option, save then remove it
    if [ "$1" = "-P" -o "$1" = "-L" ]; then
        option="$1"
        shift
    fi

    # Are we using the special syntax?  Make sure $1 isn't empty, then
    # match the first 3 characters of $1 to see if they are '...' then
    # make sure there isn't a slash by trying a substitution; if it fails,
    # there's no slash.  Both of these string routines require Bash 2.0+
    if [ -n "$1" -a "${1:0:3}" = '...' -a "$1" = "${1%/*}" ]; then
        # We are using special syntax
        length=${#1}  # Assume that $1 has nothing but dots and count them
        count=2       # 'cd ..' still means up one level, so ignore first two

        # While we haven't run out of dots, keep cd'ing up 1 level
        for ((i=$count;i<=$length;i++)); do
            cdpath="${cdpath}../" # Build the cd path
        done
        # Actually do the cd
        builtin cd $option "$cdpath"
    elif [ -n "$1" ]; then
        # We are NOT using special syntax; just plain old cd by itself
        builtin cd $option "$*"
    else
        # We are NOT using special syntax; plain old cd by itself to home dir
        builtin cd $option
    fi
} # end of cd


# Define the base directory for Logseq notes
logseq_base="/Users/arsouze/Nextcloud/Home/Logseq_work/pages"

# Loop through all files in the ~/.config/fabric/patterns directory
for pattern_file in ~/.config/fabric/patterns/*; do
    # Get the base name of the file (i.e., remove the directory path)
    pattern_name=$(basename "$pattern_file")

    # Remove any existing alias with the same name
    unalias "$pattern_name" 2>/dev/null

    # Define a function dynamically for each pattern
    eval "
    $pattern_name() {
        local title=\$1
        local date_stamp=\$(date +'%Y-%m-%d')
        local output_path=\"\$logseq_base/Youtube@\${title}-\${date_stamp}.md\"

        # Check if a title was provided
        if [ -n \"\$title\" ]; then
            # If a title is provided, use the output path
            fabric --pattern \"$pattern_name\" -o \"\$output_path\"
        else
            # If no title is provided, use --stream
            fabric --pattern \"$pattern_name\" --stream
        fi
    }
    "
done

yt() {
    if [ "$#" -eq 0 ] || [ "$#" -gt 2 ]; then
        echo "Usage: yt [-t | --timestamps] youtube-link"
        echo "Use the '-t' flag to get the transcript with timestamps."
        return 1
    fi

    transcript_flag="--transcript"
    if [ "$1" = "-t" ] || [ "$1" = "--timestamps" ]; then
        transcript_flag="--transcript-with-timestamps"
        shift
    fi
    local video_link="$1"
    fabric -y "$video_link" $transcript_flag
}


# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

